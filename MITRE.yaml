customRules:
  mitre_rules.yaml: |-
      - macro: spawned_process
        condition: (evt.type in (execve, execveat) and evt.dir=<)
      - macro: open_read
        condition: (evt.type in (open, openat) and evt.is_open_read=true)
      - macro: open_write
        condition: (evt.type in (open, openat) and evt.is_open_write=true)
      - macro: write_etc_common
        condition: (evt.type in (open, openat, creat, write) and fd.name startswith "/etc/")


      - list: ssh_files
        items: [/etc/ssh/sshd_config, /.ssh/authorized_keys]

      #The given Falco rule is designed to detect any attempt to perform account manipulation using SSH.
      #The rule is triggered when a process attempts to read or write files that are related to SSH.
      #The "condition" parameter of the rule uses the "open_read" and "open_write" system calls to monitor attempts to read from or write to files respectively.
      #The "fd.name" parameter specifies the name of the files that should be monitored, which are related to SSH in this case.
      #https://attack.mitre.org/techniques/T1098/
      #Mitre Discovery: Account Manipulation subscenario

      - rule: Account Manipulation in SSH
        desc: an attempt to do account manipulation using ssh

        condition: >
          ((open_read and (fd.name in (ssh_files)))
          or (open_write and (fd.name in (ssh_files))))
        enabled: true
        output: >
          A process with process id=%proc.pid is spawned to do account manipulation
          at ssh_files
        priority: ERROR
        tags: [host, container, account, mitre_discovery, account_manipulation, T1098]
        #This is a Falco rule that is designed to detect archive and compression activity using popular tools like tar, zip, gzip, and bzip2.
      #The rule looks for instances where these commands are being used to create or extract compressed archives.
      #If the process name is "zip" and the event direction is "<", indicating that files are being added to a zip archive.
      #If the process name is "tar" and the second argument is set to either "-czf" or "-cpf", indicating that files are being compressed and added to a tar archive.
      #If the process name is "gzip" and the event direction is "<", indicating that files are being compressed with gzip.
      #If the process name is "bzip2" and the event direction is "<", indicating that files are being compressed with bzip2.
      #https://attack.mitre.org/techniques/T1560/
      #Mitre collection: Archive collected data subscenario
      - list: encryption_proc
        items: ["zip", "tar", "gzip", "bzip2"]

      - rule: Archive and Compression Activity
        desc: Detects archive and compression activity using tar, zip, gzip, and bzip2.
        condition: >
          spawned_process and
          ((proc.name in (encryption_proc)) and
          (evt.dir = "<" or evt.arg[1] = "-czf" or evt.arg[1] = "-cpf"))
        enabled: true
        output: >
          "Archive and compression activity detected (proc.cmdline=%proc.cmdline connection=%fd.name user.name=%user.name user.loginuid=%user.loginuid container.id=%container.id evt.type=%evt.type     evt.res=%evt.res proc.pid=%proc.pid proc.cwd=%proc.cwd proc.ppid=%proc.ppid proc.pcmdline=%proc.pcmdline proc.sid=%proc.sid proc.exepath=%proc.exepath user.uid=%user.uid user.loginname=%user.loginname group.gid=%group.gid group.name=%group.name container.name=%container.name image=%container.image.repository)"
        priority: WARNING
        tags: [host, container, data, mitre_collection, archive_collected_data, T1560]
      - list: unsec_file
        items: [.bash_history]

      #This is a Falco rule designed to detect attempts to access the bash history file on a Linux system.
      #The rule will trigger an alert if it detects an "openat" system call with a file descriptor (fd) that matches the path of the bash history file.
      #The type of event must be an "openat" event, which means a file was opened using an absolute or relative path
      #The path of the file being opened must match the path of the bash history file, which is typically located at "~/.bash_history"
      #The file being opened must be in the list of unsecured files (unsec_file)
      #https://attack.mitre.org/techniques/T1552/
      #Mitre Credential Access : Unsecured credential access subscenario

      - rule: Attempt to Access Bash History File
        desc: Someone is attempting to access the bash history file
        condition: evt.type = openat and fd.filename in (unsec_file)
        enabled: true
        output: "Access to bash history file (user=%user.name, command=%evt.arg.cmdline)"
        priority: CRITICAL
        tags: [host, container, bash, mitre_credential_accesss, unsecured_credential_access, T1552]
        #This Falco rule is designed to detect attempts to embed a script to execute at the time of boot or logon on a Linux system.
      #The rule will trigger an error priority alert if it detects any write access to the commonly used /etc directory,
      #which is often used for system configuration files and startup scripts.
      #https://attack.mitre.org/techniques/T1547/
      #Mitre Persistance: boot or logon autostart execution subscenario

      - rule: Boot or Logon Autostart Execution
        desc: an attempt to embedd a script to execute at the time of boot or logon
        condition: write_etc_common
        enabled: true
        output: A script is embedded below /etc to start its execution on boot or logon in to the system
        priority: ERROR
        tags: [host, container, process, mitre_persistance, boot_or_logon_autostart_execution, T1547]
        #This is a Falco rule that is designed to detect chown or chmod operations on a system.
      #The rule looks for instances where the chown or chmod command is executed using the execve system call.
      #The evt.type is set to execve, indicating that a process is being executed.
      #The name of the process being executed matches either chown or chmod.
      #https://attack.mitre.org/techniques/T1222/
      #Mitre Defense Evasion: file and directory permission modification

      - rule: Chown or Chmod Operation
        desc: Detects chown or chmod operations
        condition: (evt.type = execve and
                    (proc.name = chown or proc.name = chmod))
        enabled: true
        output: "Chown or chmod operation detected (user=%user.name command=%proc.cmdline)"
        priority: WARNING
        tags: [host, container, permission, file, directory, mitre_defense_evasion, file_and_directory_permission_modification, T1222]
        #This Falco rule is designed to detect attempts to create user accounts or add users to a system.
      #A process has been spawned
      #The name of the process matches one of the user management binaries listed in the configuration (user_mgmt_binaries)
      #The process is not being executed within a container
      #The command line used to execute the process is not excluded by the configuration
      #https://attack.mitre.org/techniques/T1136/
      #Mitre Persistance: Create account subscenario

      - rule: Create Account or Add User
        desc: >
          activity by any programs that can manage users, passwords, or permissions. sudo and su are excluded.
          Activity in containers is also excluded--some containers create custom users on top
          of a base linux distribution at startup.
          Some innocuous command lines that don't actually change anything are excluded.
        condition: >
          spawned_process and proc.name in (user_mgmt_binaries)
        enabled: true
        output: >
          an user is added or a account is created to get persistance access of system
        priority: NOTICE
        tags: [host, container, user, account, mitre_persistance, create_account, T1136]
        #This is a Falco rule designed to detect an attempt to create a NodePort service in a Kubernetes cluster.
      #The rule will trigger an alert if it detects a Kubernetes API server event related to creating a NodePort service.
      #A Kubernetes event (kevt) must occur
      #The event must be related to creating a service (service)
      #The creation must be performed using the "kubectl create" command (kcreate)
      #The service type must be NodePort (ka.req.service.type=NodePort)

      #- rule: Create NodePort Service
        #desc: >
         # Detect an attempt to start a service with a NodePort service type
       # condition: kevt and service and kcreate and ka.req.service.type=NodePort
       # enabled: true
       # output: NodePort Service Created (user=%ka.user.name service=%ka.target.name ns=%ka.target.namespace ports=%ka.req.service.ports)
       # priority: WARNING
       # source: k8s_audit
       # tags: [k8s, nodeport]

      #this Falco rule is designed to detect attempts to create or modify system processes on a Linux system,
      #which can be a sign of a malicious actor attempting to maintain persistence on the system.
      #https://attack.mitre.org/techniques/T1543/
      #Mitre Persistance: Create or Modify system process
      #Mitre Priviledge Escalarion: Create or modify system process

      - rule: Create or Modify System Process
        desc: a system process may be created or a existing process may be modified to keep malicious process running continuously
        condition: write_etc_common
        enabled: true
        output: A malicious system process is created or a existing process is modified to act like a malicious one
        priority: ERROR
        tags: [host, container, process, mitre_priviledge_escalation, create_or_modify_system_service, T1543]
        #system, which can be a sign of an attacker attempting to steal credentials.
      #The conditions for the rule to trigger are specified in the condition field,
      #which checks for any activity by programs that can manage users, passwords, or permissions. However,
      #the sudo and su programs are excluded from the rule, as they are legitimate tools that can be used for managing users and permissions.
      #https://attack.mitre.org/techniques/T1555/
      #Mitre Credential Access: Credential from password stores

      - rule: Credentials From Password File
        desc: >
          activity by any programs that can manage users, passwords, or permissions. sudo and su are excluded.
          Activity in containers is also excluded--some containers create custom users on top
          of a base linux distribution at startup.
          Some innocuous command lines that don't actually change anything are excluded.
        condition: >
          spawned_process and proc.name in (user_mgmt_binaries)
        enabled: true
        output: >
          An attempt is made to access password file present on system to get credential access
        priority: NOTICE
        tags: [host, container, credentials, mitre_credential_access, credentials_from_password_stores, T1555]

      - list: system_executables_files
        items: [/proc/filesystems, /proc/self/stat, /usr/lib/locale/locale-archive, /usr/bin/systemctl]
      - list: system_executables_directories
        items: [/run/systemd/system, /etc/systemd/system-preset, /usr/lib/systemd/system-preset, /run/systemd/system-preset, /usr/local/lib/systemd/system-preset]


      #The given Falco rule is designed to detect any attempt to discover all services running on a system.
      #The rule is triggered by a newly spawned process or by an attempt to read files from system executable directories or files.
      #https://attack.mitre.org/techniques/T1007/
      #Mitre Discovery: system service discovery subscenario

      - rule: System Service Discovery
        desc: an attempt to discover all services that are running in system
        condition: >
          spawned_process
          or (open_read and (fd.directory in (system_executables_directories)) or
          (fd.filename in (system_executables_files)))
        enabled: false
        output: >
          A process with process id=%proc.pid is spawned to discover all the system
          system services present in the system.
        priority: ERROR
        tags: [host, container, process, mitre_discovery, system_service_discovery, T1007]

      - list: ssh_files
        items: [/etc/ssh/sshd_config, /.ssh/authorized_keys]

      #The given Falco rule is designed to detect any attempt to perform account manipulation using SSH.
      #The rule is triggered when a process attempts to read or write files that are related to SSH.
      #The "condition" parameter of the rule uses the "open_read" and "open_write" system calls to monitor attempts to read from or write to files respectively.
      #The "fd.name" parameter specifies the name of the files that should be monitored, which are related to SSH in this case.
      #https://attack.mitre.org/techniques/T1098/
      #Mitre Discovery: Account Manipulation subscenario

      - rule: Account Manipulation in SSH
        desc: an attempt to do account manipulation using ssh

        condition: >
          ((open_read and (fd.name in (ssh_files)))
          or (open_write and (fd.name in (ssh_files))))
        enabled: true
        output: >
          A process with process id=%proc.pid is spawned to do account manipulation
          at ssh_files
        priority: ERROR
        tags: [host, container, account, mitre_discovery, account_manipulation, T1098]

      #This is a Falco rule that is designed to detect when an attempt is made to read the maps file of a process.
      #The maps file is a file that provides information about the memory mappings of a process.
      #The open_read system call is used to read a file.
      #The name of the file being read matches the glob pattern /proc/*/maps, which means that the file is located in,
      #the /proc directory and has a name that consists of a numerical process ID followed by the string "maps".
      #https://attack.mitre.org/techniques/T1003/
      #Mitre Credential Access: os credential dumping subscenario

      - rule: Read Maps File of Process
        desc: An attempt to read the maps file of a process was detected
        condition: open_read and (fd.name glob /proc/*/maps)
        enabled: true
        output: Reading maps file of process
        priority: ERROR
        tags: [host, container, process, mitre_creential_access, os_credential_dumping, T1003]

      - list: network_tools
        items: ["nmap", "ping", "dig", "nslookup", "arp"]

      #This is a Falco rule that is designed to detect suspicious network scanning commands.
      #The rule looks for commands that are commonly used for network scanning activities
      #and have certain flags or arguments that suggest that the command is being used for malicious purposes.
      #The name of the process matches one of several common network scanning tools, including nmap, ping, dig, nslookup, and arp.
      #The command line arguments passed to the process contain one or more of the following flags or arguments:
      #-sP: sends a Ping Scan to determine which hosts are online.
      #-c: specifies the number of packets to send in a Ping or TCP SYN scan.
      #+short: returns only the IP address for a DNS query instead of the full output.
      #-a: performs a reverse DNS lookup to determine the hostname associated with an IP address.
      #https://attack.mitre.org/techniques/T1018/
      #Mitre Discovery: remote system discovery subscenario

      - rule: Suspicious Network Scanning Command
        desc: Detects suspicious network scanning commands
        condition:
          (proc.name=nmap or proc.name=ping or proc.name=dig or
          proc.name=nslookup or proc.name=arp) and
          (
            proc.args contains "-sP" or
            proc.args contains "-c" or
            proc.args contains "+short" or
            proc.args contains "-a"
          )
        enabled: true
        output: Suspicious network scanning command executed (user=%user.name command=%proc.cmdline)
        priority: WARNING
        tags: [host, container, network, mitre_discovery, remote_system_discovery, T1018]

      #This is a Falco rule that is designed to detect chown or chmod operations on a system.
      #The rule looks for instances where the chown or chmod command is executed using the execve system call.
      #The evt.type is set to execve, indicating that a process is being executed.
      #The name of the process being executed matches either chown or chmod.
      #https://attack.mitre.org/techniques/T1222/
      #Mitre Defense Evasion: file and directory permission modification

      - rule: Chown or Chmod Operation
        desc: Detects chown or chmod operations
        condition: (evt.type = execve and
                    (proc.name = chown or proc.name = chmod))
        enabled: true
        output: "Chown or chmod operation detected (user=%user.name command=%proc.cmdline)"
        priority: WARNING
        tags: [host, container, permission, file, directory, mitre_defense_evasion, file_and_directory_permission_modification, T1222]

      - list: groups
        items: [/etc/group]
      - list: critical_files
        items: [/etc/group, /etc/passwd, /etc/shadow, /etc/sudoers]

      #This is a Falco rule that is designed to detect processes that attempt to discover the permissions of files and groups,
      # including the group members. The rule looks for processes that read group files or attempt to get information about critical files.
      #The open_read system call is used to read a file, and the name of the file matches one of the group files specified in the groups list.
      #The evt.type is set to stat, indicating that a process is querying file metadata,
      #and the name of the file being queried matches one of the critical files specified in the critical_files list.
      #https://attack.mitre.org/techniques/T1069/
      #Mitre Discovery: permission groups discovery

      - rule: Permission and Group Members Discovery
        desc: rule to detect permission of files and group and its group members
        condition: >
          (open_read and (fd.name in (groups))) or
          (evt.type = stat and (fd.filename in (critical_files)))
        enabled: true
        output: suspicious process is spawwned to check file permissions and group members.
        priority: ERROR
        tags: [host, container, permission, group, mitre_discovery, permission_groups_discovery, T1069]

      - list: data_destruction_cmd
        items: ["shred", "dd", "wipe"]

      #This is a Falco rule that is designed to detect activity related to data destruction, such as file shredding or disk wiping.
      #The rule looks for instances where a specific command is executed or files with certain names are accessed.
      #The evt.type is set to execve, indicating that a process is being executed, and the name of the process matches one of the commands specified in the data_destruction_cmd list.
      #The evt.type is set to openat, indicating that a file is being accessed, and the name of the file being accessed ends with either .shred or .wipe.
      #https://attack.mitre.org/techniques/T1485/
      #Mitre Impact: data destruction for impact subscenario

      - rule: Detect Data Destruction Activity
        desc: Detects activity related to data destruction,such as file shredding or disk wiping.
        condition: >
          (evt.type = execve and proc.name in (data_destruction_cmd)) or
          (evt.type = openat and (fd.name endswith ".shred" or fd.name endswith ".wipe"))
        enabled: true
        output: "Data destruction activity detected."
        priority: WARNING
        tags: [host, container, filesystem, process, mitre_impact, data_destruction_for_impact, T1485]

      #This is a Falco rule that is designed to detect archive and compression activity using popular tools like tar, zip, gzip, and bzip2.
      #The rule looks for instances where these commands are being used to create or extract compressed archives.
      #If the process name is "zip" and the event direction is "<", indicating that files are being added to a zip archive.
      #If the process name is "tar" and the second argument is set to either "-czf" or "-cpf", indicating that files are being compressed and added to a tar archive.
      #If the process name is "gzip
